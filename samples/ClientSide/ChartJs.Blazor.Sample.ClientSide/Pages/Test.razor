@page "/test"

@using ChartJs.Blazor.Charts
@using ChartJs.Common.Properties
@using ChartJs.Util
@using ChartJs.BarChart
@using ChartJs.BarChart.Axes
@using ChartJs.Common.Axes
@using ChartJs.Common.Wrappers
@using ChartJs.Common.Axes.Ticks
@using ChartJs.Common.Handlers.OnClickHandler
@using Newtonsoft.Json

<ChartJsBarChart @ref="barChartJs" Config="@_config" Height="250"/>

<textarea rows="@Rows" @bind-value="@EventArgs" @bind-value:event="oninput" style="width: 100%; resize: both; height:auto "></textarea>

@code {

    private ChartJsBarChart barChartJs;
    private BarConfig _config;
    public int Rows { get; set; } = 3;
    private BarDataset<DoubleWrapper> _barDataSet;

    public string EventArgs { get; set; } = "";

    protected override void OnInitialized()
    {
        _config = new BarConfig()
        {
            Options = new BarOptions
            {
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Simple Bar Chart"
                },
                Scales = new BarScales
                {
                    XAxes = new List<CartesianAxis>
                    {
                        new BarCategoryAxis
                        {
                            BarPercentage = 0.5,
                            BarThickness = BarThickness.Flex
                        }
                    },
                    YAxes = new List<CartesianAxis>
                    {
                        new BarLinearCartesianAxis
                        {
                            Ticks = new LinearCartesianTicks
                            {
                                BeginAtZero = true
                            }
                        }
                    }
                },
                OnClick = new DotNetInstanceClickHandler(OnClickHandler),
                MaintainAspectRatio = false,
                Responsive = true
            }
        };

        _config.Data.Labels.AddRange(new[] {"A", "B", "C", "D"});

        _barDataSet = new BarDataset<DoubleWrapper>
        {
            Label = "My double dataset",
            BackgroundColor = new[] {ColorUtil.RandomColorString(), ColorUtil.RandomColorString(), ColorUtil.RandomColorString(), ColorUtil.RandomColorString()},
            BorderWidth = 0,
            HoverBackgroundColor = ColorUtil.RandomColorString(),
            HoverBorderColor = ColorUtil.RandomColorString(),
            HoverBorderWidth = 1,
            BorderColor = "#ffffff"
        };

        _barDataSet.AddRange(new double[] {8, 5, 3, 7}.Wrap());
        _config.Data.Datasets.Add(_barDataSet);
    }

    [JSInvokable]
    public void OnClickHandler(object sender, object args)
    {
        EventArgs += JsonConvert.SerializeObject(JsonConvert.DeserializeObject($"{Environment.NewLine}{args}"), Formatting.Indented);
        Rows = Math.Max(3, EventArgs.Split(new[] {Environment.NewLine}, StringSplitOptions.None).Length + 1);
        StateHasChanged();
    }

    private void OnClear()
    {
        EventArgs = string.Empty;
        StateHasChanged();
    }

}